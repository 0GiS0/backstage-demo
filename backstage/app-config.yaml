app:
  title: Scaffolded Backstage App
  baseUrl: "http://localhost:3000"

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 0.0.0.0
  csp:
    connect-src: ["'self'", "http:", "https:"]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
    allowedHeaders: "*"

  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    # client: better-sqlite3
    # connection: ':memory:'
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  azure:
    - host: dev.azure.com
      token: ${AZURE_PERSONAL_ACCESS_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: "external" # Alternatives - 'local'
  generator:
    runIn: "docker" # Alternatives - 'local'
  publisher:
    type: "azureBlobStorage" # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    azureBlobStorage:
      containerName: ${TECHDOCS_AZURE_CONTAINER_NAME}
      credentials:
        accountName: ${TECHDOCS_AZURE_ACCOUNT_NAME}
        accountKey: ${TECHDOCS_AZURE_ACCOUNT_KEY}

auth:
  environment: development
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    microsoft:
      development:
        clientId: ${AZURE_CLIENT_ID}
        clientSecret: ${AZURE_CLIENT_SECRET}
        tenantId: ${AZURE_TENANT_ID}
        domainHint: ${AZURE_TENANT_ID}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail
scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  defaultAuthor:
    email: "backstage@returngis.net"
    name: "Backstage Team"
  defaultCommitMessage: "chore: scaffolded files from template"

catalog:
  orphanStrategy: delete

  providers:
    microsoftGraphOrg:
      authority: https://login.microsoftonline.com/${AZURE_TENANT_ID}
      clientId: ${AZURE_CLIENT_ID}
      clientSecret: ${AZURE_CLIENT_SECRET}
      tenantId: ${AZURE_TENANT_ID}
      tokenAudience: https://graph.microsoft.com
      user:
        filter: "accountEnabled eq true and userType eq 'Member'"
      group:
        filter: securityEnabled eq true
      schedule:
        frequency: PT1M
        timeout: PT50M

    azureDevOps:
      returngisorg:
        organization: returngisorg
        # project: "*" # this will match all projects
        project: "*"
        # project: Backstage # this will match all projects
        # repository: '*' # this will match all repos
        path: /catalog-info.yaml
        schedule:
          frequency: { minutes: 1 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow:
        [
          System,
          Domain,
          Component,
          API,
          Resource,
          Location,
          Template,
          User,
          Group,
        ]
